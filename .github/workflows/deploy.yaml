name: Build and Deploy to ECR with semantic release versioning

on:
  push:
    branches:
      - main

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    environment:
      name: semvar
    outputs:
      new_release_version: ${{ steps.semantic-release.outputs.new_release_version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Semantic Release
        id: semantic-release
        uses: cycjimmy/semantic-release-action@v3
        with:
          branches: |
            [
              '+([0-9])?(.{+([0-9]),x}).x',
              'main',
              'master',
              'next',
              'next-major',
              {
                name: 'beta',
                prerelease: true
              },
              {
                name: 'alpha',
                prerelease: true
              }
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

  build-and-push-backend:
    runs-on: ubuntu-latest
    needs: semantic-release
    environment:
      name: main
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build Backend App
        run: |
          cd BE
          docker build -t backend-app .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Backend Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: recipe-mgt/backend
          IMAGE_TAG: ${{ needs.semantic-release.outputs.new_release_version }}
        run: |
          docker tag backend-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  build-and-push-frontend:
    runs-on: ubuntu-latest
    needs: semantic-release
    environment:
      name: main
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build Frontend app
        run: |
          cd FE
          docker build -t frontend-app .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Frontend Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: recipe-mgt/frontend
          IMAGE_TAG: ${{ needs.semantic-release.outputs.new_release_version }}
        run: |
          docker tag frontend-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # terraform:
  #   runs-on: ubuntu-latest
  #   needs: semantic-release
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

  #   - name: Set up Terraform
  #     uses: hashicorp/setup-terraform@v2
  #     with:
  #       terraform_version: 1.5.0

  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: us-east-1

  #   - name: Terraform Init
  #     run: terraform init

  #   - name: Terraform Plan
  #     env:
  #       IMAGE_TAG: ${{ needs.semantic-release.outputs.new_release_version }}
  #     run: terraform plan -chdir=infra/ -var 'backend_image_version=${IMAGE_TAG}' -var 'frontend_image_version=${IMAGE_TAG}' -out=tfplan --variable

  #   - name: Terraform Apply
  #     if: github.ref == 'refs/heads/main'
  #     run: terraform apply -chdir=infra/ -var 'backend_image_version=${IMAGE_TAG}' -var 'frontend_image_version=${IMAGE_TAG}' -input=false tfplang